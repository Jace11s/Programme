grid = []
gridsize = 10
cubesize = 50
totalsize = cubesize*gridsize


#snakebody/food arrays
food = []
snakeBody = []


rotation = 0
rotation_speed = 0.05
speed = 10
direction = int(random(6))

            
def setup():
    size(500,500, P3D)
    creategrid()
    frameRate(30)
    reset()

        
def reset():
    global food, snakeBody
    snakeBody = [randomposition()]
    food = randomposition()
    cleangrid()
    
   
    
def creategrid():
    global grid, gridsize
    grid = []
    translate(width/2, height/2, 200)
    for x in range(gridsize):
        grid.append([])
        for y in range(gridsize):
            grid[x].append([])
            for z in range(gridsize):
                grid[x][y].append(0)
            
                
def randomposition():    #int shcneidet kommazahlen ab
    return [
        int(random(gridsize)),
        int(random(gridsize)),
        int(random(gridsize))
    ];
    

def visualgrid():
    background(0)
    translate(width/2, height/2, -1000)
    rotateY(rotation)
    fill(255)
    noStroke()
    for x in range(gridsize):
        for y in range(gridsize):
            for z in range(gridsize):
                value = grid[x][y][z]
                pushMatrix()
                translate(-totalsize/2, -totalsize/2,-totalsize/2)
                translate(x * cubesize,y * cubesize,z * cubesize)
                if value == 1:
                    fill(22,245,38)
                elif value == 2:
                    fill(242,45,10)
                if value > 0:
                    box(cubesize)
            
                popMatrix()
    #rahmen
    noFill()
    stroke(5,170,250)
    
    translate(-cubesize/2,-cubesize/2,-cubesize/2)
    box(totalsize)
                
def correctBody():
    global snakeBody;
    for pos in snakeBody:
        for c in range(3):
            if pos[c] < 0: 
                pos[c] += gridsize;
            pos[c] = pos[c] % gridsize;  #führt dazu, dass pos[c] nicht mehr als gridsize ist (mithilfe vom modulu (%))              

def draw():
    pushMatrix()
    cleangrid()
    game_loop()
    visualgrid()
    popMatrix()
    score()

           
def score():
    textSize(20)
    fill(255)
    text("Score:" + str(len(snakeBody)-1), 0, 20)
                       

add_block = False   
    
def game_loop():
    global rotation, food, grid, snakeBody, add_block, direction
    #print("test")
    if keyPressed:
        if keyCode == 37:
            rotation += rotation_speed
        if keyCode == 39:
            rotation -= rotation_speed
            
    drawGrid(food[0],food[1],food[2],2)
    
    for i in snakeBody:  #i für jeden körperteil
        grid[i[0]][i[1]][i[2]] = 1
        
    if keyPressed:                                   #richtungen
        if key == 'w' and direction != 2:
            direction = 0
        if key == 'a' and direction != 3:
            direction = 1
        if key == 's' and direction != 0:
            direction = 2
        if key == 'd' and direction != 1:
            direction = 3
        if keyCode == 38 and direction != 5:
            direction = 4
        if keyCode == 40 and direction != 4:
            direction = 5
        if key == 'r':
            reset()
        if key == 'v':
            add_block = True
            
        
    if frameCount % speed == 0:  #alle 10 schritte
        nextHead = snakeBody[0][:]   
        if direction == 0:
            nextHead[1] -= 1;
        if direction == 1:
            nextHead[0] -= 1;
        if direction == 2:
            nextHead[1] += 1;
        if direction == 3:
            nextHead[0] += 1;
        if direction == 4:
            nextHead[2] -= 1;
        if direction == 5:
            nextHead[2] += 1;
        
        snakeBody.insert(0, nextHead)
        correctBody()
        if snakeBody[0] != food and add_block != True:
            snakeBody.pop(len(snakeBody)-1);
        else:
            food = randomposition()
        add_block = False
        if snakeBody[0] in snakeBody[1:]:
            reset()
            
    
def cleangrid():
    for x in range(gridsize):
        for y in range(gridsize):
            for z in range(gridsize):
                grid[x][y][z] = 0;
                
def drawGrid(x,y,z, value):
    grid[x][y][z] = value